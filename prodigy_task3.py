# -*- coding: utf-8 -*-
"""Prodigy-Task3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a0EEbGso2QYBL7WZi3GGRY_h0hdqpfyA
"""

!pip install pandas numpy scikit-learn matplotlib seaborn

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.tree import plot_tree
import matplotlib.pyplot as plt

data=pd.read_csv('bank.csv')

data.isnull().sum()

data.head()

data.shape

data.dtypes

plt.figure(figsize=(10, 6))
plt.boxplot(data['job'], vert=True, patch_artist=True)
plt.title('Boxplot of Job')
plt.ylabel('Jobtye')
plt.show()

plt.figure(figsize=(10, 6))
plt.boxplot(data['age'], vert=True, patch_artist=True)
plt.title('Boxplot of Age')
plt.ylabel('Age')
plt.show()

# Preprocess the data
le = LabelEncoder()
for column in data.columns:
    if data[column].dtype == 'object':
        data[column] = le.fit_transform(data[column])

data.head()

# Split features and target
X = data.drop('deposit', axis=1)
y = data['deposit']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train the decision tree classifier
dt_classifier = DecisionTreeClassifier(random_state=42)
dt_classifier.fit(X_train, y_train)

# Make predictions on the test set
y_pred = dt_classifier.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.2f}")
print("\nClassification Report:")
print(classification_report(y_test, y_pred))
print("\nConfusion Matrix:")
print(confusion_matrix(y_test, y_pred))

# Visualize the decision tree (limited to depth 3 for clarity)
plt.figure(figsize=(20,10))
plot_tree(dt_classifier, max_depth=3, feature_names=X.columns, class_names=['No', 'Yes'], filled=True, rounded=True)
plt.show()
plt.close()

# Feature importance
feature_importance = pd.DataFrame({'feature': X.columns, 'importance': dt_classifier.feature_importances_})
feature_importance = feature_importance.sort_values('importance', ascending=False)
print("\nFeature Importance:")
print(feature_importance)